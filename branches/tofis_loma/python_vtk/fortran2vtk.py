#!/usr/local/bin/python2.7
import numpy as np
from pyvtk import *
def pln2vtk(x,y,z,field,fieldname,fname,ASCII=1):
    """Converts a plane from lomaHZ to .vtk ASCII"""
    mgalx = len(x);my = len(y); mgalz=len(z);
    if mgalz==1:
        npoints = my*mgalx
        mydata=np.float32(np.reshape(np.transpose(field),[npoints]))
    elif mgalx==1:
        npoints =my*mgalz
        #mydata=np.float32(np.reshape(np.transpose(field),[npoints]))
        mydata=np.float32(np.reshape(field,[npoints]))
    else:
        npoints = my*mgalx*mgalz
        mydata=np.float32(np.reshape(np.transpose(field),[npoints]))
#mydata = np.array(mydata)
#print np.shape(mydata)
    y2 = np.float32(y)
    x2 = np.float32(x)
    z2 = np.float32(z)
    vtk = VtkData(RectilinearGrid(list(x2),list(y2),list(z2)),
             PointData(Scalars(mydata,name=fieldname)))
    if ASCII==1:
        vtk.tofile(fname)
    else:
        vtk.tofile(fname,'binary')
 


def create_vtk_vector(x,y,z,field,fieldname,filename,ASCII=0):
    """
    Used to create vectors such velocity or vorticity
    previously the components of the vector should have been loaded as:
    varpln1='upyx';varpln2='vpyx';varpln3='wpyx'
    field = [ [] for i in range(3)];

    [field[0],y,x,z] = readfieldij(filename+'.' + varpln1);
    [field[1],y,x,z] = readfieldij(filename+'.'+varpln2);
    [field[2],y,x,z] = readfieldij(filename+'.'+varpln3);


    
    """
    fname = filename
    data = [ 1 for i in range(3)];
    mgalx = len(x);my = len(y); mgalz=len(z);
    #fieldname = 'vel'
    if mgalz==1:
        npoints = my*mgalx
        data = np.float32(np.reshape(np.transpose(field),[npoints*3]))
    elif mgalx==1:
	npoints = my*mgalz
        data = np.float32(np.reshape(np.transpose(field),[npoints*3]))
    else:
	npoints = my*mgalx*mgalz
        data = np.float32(np.reshape(np.transpose(field),[npoints*3]))

#mydata = np.array(mydata)
#print np.shape(mydata)
    y2 = np.float32(y)
    x2 = np.float32(x)
    z2 = np.float32(z)
    vtk = VtkData(RectilinearGrid(list(x2),list(y2),list(z2)),
             PointData(Vectors(data,name=fieldname)))
    if ASCII==1:
        vtk.tofile(fname)
    else:
        vtk.tofile(fname,'binary')



def Two2vtk(x,y,z,field1,field2,fieldname1,fieldname2,fname,ASCII=1):
    """Converts a plane from lomaHZ to .vtk ASCII"""
    mgalx = len(x);my = len(y); mgalz=len(z);
    if mgalz==1:
        npoints = my*mgalx
        mydata=np.float32(np.reshape(np.transpose(field1),[npoints]))
        mydata2=np.float32(np.reshape(np.transpose(field2),[npoints]))
    elif mgalx==1:
        npoints =my*mgalz
        mydata=np.float32(np.reshape(np.transpose(field1),[npoints]))
        mydata2=np.float32(np.reshape(np.transpose(field2),[npoints]))
    else:
        npoints = my*mgalx*mgalz
        mydata=np.float32(np.reshape(np.transpose(field1),[npoints]))
        mydata2=np.float32(np.reshape(np.transpose(field2),[npoints]))
#mydata = np.array(mydata)
#print np.shape(mydata)
    y2 = np.float32(y)
    x2 = np.float32(x)
    z2 = np.float32(z)
    vtk = VtkData(RectilinearGrid(list(x2),list(y2),list(z2)),
             PointData(Scalars(mydata,name=fieldname1)))
    vtk.point_data.append(Scalars(mydata2,name=fieldname2))
    if ASCII==1:
        vtk.tofile(fname)
    else:
        vtk.tofile(fname,'binary')


def planeyj2vtk(filename,varpln,binary,pert,plyx=48,plyz=1):
 	""" 
	This function reads the field generated by TOFIS fortran program.
	Computing some stats and converting 2 vtk
	() = stats2vtk(filename)
	"""
	import scipy as sc
	import numpy as np
	import pylab
	#import fortran2vtk
	f = open(filename,'rb')
        planeij = filename[-2:]
	#Create dtypes for proper reading from Fortran unformatted
	# binary file
	#Declaring types
	yfmap = np.dtype([('y','float64'),('fmap','float64')])
	#uw00 = np.dtype([('u00','float32'),('w00','float32')])
	rec1 = np.dtype([('dummy1','uint32'), \
                ('time','float32'),('Re','float32'), \
		('alp','float32'),('bet','float32'), \
		('mgalx','uint32'),('my','uint32'),('mgalz','uint32'),\
		('nspec','uint32'),('plane','uint32'),\
		('dummy2','uint32')])
	#Read first record
	RECORD1=np.fromfile(f,rec1,1)

	#Check if first record is ok...
	if RECORD1['dummy1'] != RECORD1['dummy2']:
		print "File read not good...!"
	else:
    		print "Fiel read correctly :)"

	mgalx=RECORD1['mgalx'][0]
	my=RECORD1['my'][0]
	mgalz=RECORD1['mgalz'][0]
	nspec=RECORD1['nspec'][0]
                
        plane = RECORD1['plane']

	print "nspec= %s" % nspec

	rec2 = np.dtype([('dummy1','uint32'), \
 		('jspecy','uint32',nspec),  \
		('yfmap',yfmap,my),	\
		('dummy2','uint32')])
	#READ record2
	RECORD2=np.fromfile(f,rec2,1)

	#Check if record2 is ok...
	if RECORD2['dummy1'] != RECORD2['dummy2']:
		print "File read not good...!"
	else:
    		print "Fiel read correctly :)"

	#Save y vector amd jspecy
	y = RECORD2['yfmap']['y'][0,]
        jspecy = RECORD2['jspecy'][0,]

	Lx = 2*3.1415/RECORD1['alp']
	Lz = 2*3.1415/RECORD1['bet']
	x = np.linspace(-Lx/2.,Lx/2.,mgalx)
	z = np.linspace(-Lz/2.,Lz/2.,mgalz)
	#These depends on TOFIS
	#READING Differently depnding of plane typ
	print 'Plane %s...\n' %planeij
	if planeij=='yz':
		rect = np.dtype([('dummy1','uint32'), \
               	('data','float32',mgalz), \
               	('dummy2','uint32')])
		#Read all planes Y info
		FIELD1=np.ndarray(shape=(mgalz,my),\
		dtype=float, order='F')
		x=[x[plyz]]
	else:
		rect = np.dtype([('dummy1','uint32'), \
               	('data','float32',mgalx), \
               	('dummy2','uint32')])
		#Read all planes Y info
		FIELD1=np.ndarray(shape=(mgalx,my),\
		dtype=float, order='F')
		z=[z[plyx]]
	#ReadSTATS
	if pert>0.0:
		statsname=filename[:-2] +'xz.stats.csv'
		stats = np.loadtxt(statsname,delimiter=',')
		print 'file %s loaded' %(statsname)
		yy=stats[0,:]
		fmeany=stats[1,:]
		fmax = np.max(stats[1,:])
		fmin = np.min(stats[1,:])
		print 'range of data from %s to %s' %(fmin,fmax)
		print 'Total range =  %s' %(fmax-fmin)
	if varpln[0:2]=='Tf': #Scale by DT and take the minimum (set from 0 to 1)
		scale = 1.0/(fmax-fmin)
		print 'Temperature field: obtaining T-Tmin/(Tmin-T0)'
		if pert>0.0:
			for j in range(my):
    				readrec = np.fromfile(f,rect,1)
    				rectdata = readrec['data']
				FIELD1[:,j] = np.multiply(np.subtract(rectdata[0,:],fmin),scale)
		else:
			for j in range(my):
    				readrec = np.fromfile(f,rect,1)
    				rectdata = readrec['data']
				FIELD1[:,j] = rectdata[0,:]
	else:
		if pert>0.0:
			for j in range(my):
    				readrec = np.fromfile(f,rect,1)
    				rectdata = readrec['data']
				FIELD1[:,j] = np.subtract(rectdata[0,:],np.multiply(pert,fmeany[j]))
		else:
    				readrec = np.fromfile(f,rect,1)
    				rectdata = readrec['data']
				FIELD1[:,j] = rectdata[0,:]
		
	if pert>0:
		fnpln=filename+'.pert'
	else:
		fnpln=filename
	#Write in VTK
	pln2vtk(x,y,z,FIELD1,varpln,fnpln,binary)
	print 'file: %s created' %fnpln 
	#	pln2vtk(x,y,[z[plyx]],FIELD1,varpln,fnpln,binary)
        print 'Data from time = %s' % RECORD1['time']
        print 'mgalx = %s, my = %s, mgalz = %s' % (RECORD1['mgalx'], \
		RECORD1['my'],RECORD1['mgalz'])



def planexz2vtk(filename,varpln,binary,pert,pln1,pln2):
	import scipy as sc
	import numpy as np
	import pylab
#	import fortran2vtk
	f = open(filename,'rb')
        planeij = filename[-2:]
	#Create dtypes for proper reading from Fortran unformatted
	# binary file
	#Declaring types
	yfmap = np.dtype([('y','float64'),('fmap','float64')])
	#uw00 = np.dtype([('u00','float32'),('w00','float32')])
	rec1 = np.dtype([('dummy1','uint32'), \
                ('time','float32'),('Re','float32'), \
		('alp','float32'),('bet','float32'), \
		('mgalx','uint32'),('my','uint32'),('mgalz','uint32'),\
		('nspec','uint32'),('plane','uint32'),\
		('dummy2','uint32')])
	#Read first record
	RECORD1=np.fromfile(f,rec1,1)

	#Check if first record is ok...
	if RECORD1['dummy1'] != RECORD1['dummy2']:
		print "File read not good...!"
	else:
    		print "Fiel read correctly :)"

	mgalx=RECORD1['mgalx'][0]
	my=RECORD1['my'][0]
	mgalz=RECORD1['mgalz'][0]
	nspec=RECORD1['nspec'][0]
                
        plane = RECORD1['plane']

	print "nspec= %s" % nspec

	rec2 = np.dtype([('dummy1','uint32'), \
 		('jspecy','uint32',nspec),  \
		('yfmap',yfmap,my),	\
		('dummy2','uint32')])
	#READ record2
	RECORD2=np.fromfile(f,rec2,1)

	#Check if record2 is ok...
	if RECORD2['dummy1'] != RECORD2['dummy2']:
		print "File read not good...!"
	else:
    		print "Fiel read correctly :)"

	#Save y vector amd jspecy
	y = RECORD2['yfmap']['y'][0,]
        jspecy = RECORD2['jspecy'][0,]

	Lx = 2*3.1415/RECORD1['alp']
	Lz = 2*3.1415/RECORD1['bet']
	x = np.linspace(-Lx/2.,Lx/2.,mgalx)
	z = np.linspace(-Lz/2.,Lz/2.,mgalz)
	print 'Reading VOLUME XZ...\n'
	#Create type "recplane"
	recplaney = np.dtype([('dummy1','uint32'), \
               	 ('data','float32',mgalx*mgalz), \
               	('dummy2','uint32')])

	#Read all planes Y info
	print "Number of y planes:%s" % nspec
	Npoints=mgalx*mgalz
	print "Npoints=%s" %Npoints
	if pert>0.0:
		statsname=filename[:-2] +'xz.stats.csv'
		stats = np.loadtxt(statsname,delimiter=',')
		print 'file %s loaded' %(statsname)
		yy=stats[0,:]
		fmeany=stats[1,:]
		fmax = np.max(stats[1,:])
		fmin = np.min(stats[1,:])
	for j in range(nspec):
    		readrec = np.fromfile(f,recplaney,1)
    		planeydata = readrec['data']
		planey = planeydata.ravel()
    		#planeydata.shape=(mgalz,mgalx) 
		#NOW WE START COMPUTING STATS
		#1) Compute average
		xmean=np.mean(planey)
		fmin = np.min(planey)
		fmax = np.max(planey)
		#Accumulate stats
		if j< pln1 or j>pln2:
			continue
		print "plane at y = %s" % y[jspecy[j]-1]
		pos=y[jspecy[j]-1]
		sig = 'p'
		if pos<0:
			sig='m'
		fnpln=filename+'y'+sig+ '%5.5i'% (abs(pos*100))
		#T is special case
		if (varpln[0:2]=='Tf' and pert>0.0):
			scale = 1.0/(fmax-fmin)
			f0 = fmin
			print 'Temperature field: obtaining T-Tmin/(Tmin-T0)'
		elif pert>0.0:
			scale = 1.0
			f0 = xmean
			print 'Corrected field: obtaining f-fmean'
		else:
			print 'Field as is: obtaining f'
			scale = 1.0
			f0=0.0
		planeydata=np.multiply(np.subtract(planeydata,f0),scale)
		planeydata.shape=(mgalz,mgalx)
		planey=planeydata.transpose()
		if pert>0:
			fnpln=fnpln+'.pert'
		else:
			fnpln=fnpln
		pln2vtk(x,[pos],z,planey,varpln,fnpln,binary)
		print 'file: %s created' %fnpln 
        print 'Data from time = %s' % RECORD1['time']
        print 'mgalx = %s, my = %s, mgalz = %s' % (RECORD1['mgalx'], \
		RECORD1['my'],RECORD1['mgalz'])

