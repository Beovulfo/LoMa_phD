!***********************************************************************!
! AAF  This program getstats from one variable(now only T) in one field
!      and write stats to stat file
!***********************************************************************!
      Program main
      use spectra
      use wave
      use point
      use fis
      use statis
      use MPI_GROUPS

      implicit none 
 
      include 'mpif.h'
      include 'ctes3D'
 
!      ----------------------- Variables -------------------------------

      integer master,myid,iproc,numprocs,istat(MPI_STATUS_SIZE),ierr  
      integer nbuffsize,nwkasize,nbuffsizephys
      integer itags,newtag,imess,i,comproc(0:numerop-1),
     .                      savproc(numerop:numtot-1)      
      
      real(8) :: u00(my),w00(my)
      real(4) :: val 
      real(8) ::  v00(my) 
      real(4), allocatable:: vor(:),phi(:),wk(:),
     .                      psi(:),scal(:),sp(:),chwk(:),wkT(:)
      integer opt,inxwk,inywk,imywk,inzwk,ichwk,iwkT


!     ------------------------ Program ---------------------------------
      
                           ! MPI GROUPS !     
      call MPI_INIT(ierr)
      call MPI_COMM_RANK (MPI_COMM_WORLD,myid,ierr)
      call MPI_COMM_SIZE (MPI_COMM_WORLD,numprocs,ierr)
      call MPI_COMM_GROUP(MPI_COMM_WORLD,MPI_GROUP_WORLD,ierr)

      if (numprocs.ne.numtot) then
         write(*,*) 'wrong number of processors',numprocs
         write(*,*) 'compiled with', numtot
         stop
      endif

! ------------- be careful with the numbers of planes

      if (mod(nplanes,numerop).ne.0) then
         write(*,*) 'the number of planes',nplanes
         write(*,*) 'must be multiple of processors,',numerop
         stop
      endif
      
      write(*,*) 'MPI enviroment initialized ...', myid

      !how to proceed
      !opt==1 -> getstats from Scalar
      !opt == 0 -> getstas from gradPSI and write fields!
      !opt == 2 -> getstas from u,v,w 
      !only workign for proc=1
      opt=2

!--------------- initializes commons and things 
       call initcr(myid)

      write(*,*) 'After initcr...'
!--------------  allocates spectra and buffers
      nbuffsize = max((pe-pb+1)*2*my*mgalz,(le-lb+1)*mx)
      nbuffsizephys =(le-lb+1)*mgalx
!added v00 and v00wk,rf0v
       nwkasize  = 8*nbuffsize + 8*my 
       allocate(vor(2*my*mz*(pe-pb+1)))
       allocate(phi(2*my*mz*(pe-pb+1)))
       allocate(psi(2*my*mz*(pe-pb+1)))
       allocate(scal(2*my*mz*(pe-pb+1)))
       allocate(wkT(2*my*mgalz*(pe-pb+1)))
       allocate(wk(nwkasize))
       ! make zero everything  
     


      call resetstats()
      
      do i=1,2*my*mz*mmp 
           vor(i) = 0. 
            phi(i) = 0. 
            psi(i) = 0. 
            scal(i) = 0. 
      enddo
      do i =1,2*my*mgalz*mmp
           wkT(i) = 0. 
      enddo              
      do i=1,my          
          u00(i) = 0d0     
          w00(i) = 0d0  
          v00(i) = 0d0  
      enddo              
      !clean wk
      do i = 1,nwkasize
              wk(i) = 0.0
      enddo

      call getfil(vor,phi,psi,scal,u00,v00,w00,wk,myid)
      
      !Here starts the real progra
      if ((opt.eq.1).or.(opt.eq.0)) then
         call work(scal,psi,wkT,wk,myid,opt)
      endif
      if (opt.eq.2) then
         inxwk = 1
         inywk = inxwk + nbuffsize
         imywk = inywk + nbuffsize
         inzwk = imywk + nbuffsize
         iwkT =  inzwk + nbuffsize
         ichwk =  iwkT + nbuffsize
         !Do operations to get rhou,rhov,rhow
         call MPI_BARRIER(MPI_COMM_WORLD,ierr)     
         call workwithvel(vor,phi,psi,scal,u00,v00,w00,
     .    wk(inxwk),wk(inywk),wk(imywk),wk(inzwk),wk(iwkT),wk(ichwk)
     .    ,myid,opt)
      endif

                ! finalize procedure      !
                
      call MPI_BARRIER(MPI_COMM_WORLD,ierr)     

      master=0
      if (myid.ne.0) then

         itags=myid
         call MPI_SEND(1.,1,MPI_REAL,master,
     &              itags,MPI_COMM_WORLD,ierr)

      else

         do iproc=1,numprocs-1

            call MPI_RECV(val,1,MPI_REAL,MPI_ANY_SOURCE,
     &              MPI_ANY_TAG,MPI_COMM_WORLD,istat,ierr)

            imess=istat(MPI_TAG)
            write(*,*) 'process',imess,'over'
            newtag=100
            call MPI_SEND(1.,1,MPI_REAL,imess,
     &                newtag,MPI_COMM_WORLD,ierr)
         enddo

      endif

      if (myid.ne.0) then

         call MPI_RECV(val,1,MPI_REAL,master,
     &              MPI_ANY_TAG,MPI_COMM_WORLD,istat,ierr)
         if(istat(MPI_TAG).eq.100) goto 200

      else

         write(*,*) 'process',master,'over'

      endif

!!-------------------------------------------------!

200   call MPI_FINALIZE(ierr)

      endprogram






!***********************************************************************!
!
!                   Initializes everything
!                                           
!***********************************************************************!
      subroutine initcr(myid)
      use timacc
      use fis
      use tem
      use ficheros
      use point
      use MPI_datatype
      use matrices
      use diag
      use wave
      use wkhvect
      use statis
      use spectra

      implicit none 
      include 'mpif.h'
      include 'ctes3D'
      
      
!   !--------------------- variables -------------------------------------
      integer ndat, nidat
      parameter(ndat=5,nidat=7)

      integer istat(MPI_STATUS_SIZE),ierr,myid,idat(nidat)
      integer i,j,iproc,k,ifor,blocks,elem,stride,mxe,mye,mze

      real(8),allocatable::d11(:,:),d12(:,:),d21(:,:),d22(:,:)
      integer,allocatable::aux1(:),aux2(:)

      real(4) dat(ndat),pi,Delt,zero,Ree,alpe,bete,a0e

      character*100 text

c ---------------------- Programa --------------------------------------

      Pi=4.*atan(1.)
      zero = 0.0
c                ! reads input data from hre.dat !

      if(myid.eq.0) then
         open(19,file='hre.dat',status='old')


!166      read(19,'(a)') text
!         if(text(1:2).eq.'CC') goto 166
!         read(text,'(a70)') filinp

167      read(19,'(a)') text
         if(text(1:2).eq.'CC') goto 167
         read(text,'(a70)') filstt

         close(19)
         !Same input file and statistic file
         filinp = filstt
      endif

      call MPI_BARRIER(MPI_COMM_WORLD,ierr)
      write(*,*) 'within initcr, after barrier COMMWORLD'

      iinp=2
      ispf=15 !aaf ??
      isn=3
      iout=1
 
c ---------------  compute y coordinates, pointers and
c ---------------  modes values for FOURIER

      if (myid.eq.0) then
         open(iinp,file=filinp,status='unknown',form='unformatted')
         read(iinp) time,Ree,alpe,bete,a0e,mxe,mye,mze,
     .               (y(j),fmap(j),j=1,my)
         rewind(iinp)
         close(iinp)
         !Input parameters are the only ones needed
         Re = Ree
         alp = alpe
         bet = bete
         a0 =a0e
         do iproc=1,numtot-1
            call MPI_SEND(y,my,MPI_REAL8,iproc,
     &                 iproc,MPI_COMM_WORLD,ierr)
            call MPI_SEND(fmap,my,MPI_REAL8,iproc,
     &                 iproc,MPI_COMM_WORLD,ierr)
            call MPI_SEND(alp,1,MPI_REAL8,iproc,
     &                 iproc,MPI_COMM_WORLD,ierr)
            call MPI_SEND(bet,1,MPI_REAL8,iproc,
     &                 iproc,MPI_COMM_WORLD,ierr)

         enddo
      else
         call MPI_RECV(y,my,MPI_REAL8,0,
     &                MPI_ANY_TAG,MPI_COMM_WORLD,istat,ierr)
         call MPI_RECV(fmap,my,MPI_REAL8,0,
     &                MPI_ANY_TAG,MPI_COMM_WORLD,istat,ierr)
         call MPI_RECV(alp,1,MPI_REAL8,0,
     &                MPI_ANY_TAG,MPI_COMM_WORLD,istat,ierr)
         call MPI_RECV(bet,1,MPI_REAL8,0,
     &                MPI_ANY_TAG,MPI_COMM_WORLD,istat,ierr)
      
      endif
        
      write(*,*) 'calling pointers_calc'

      call pointers_calc(pbeg,pend,lbeg,lend,procs,myid)
      pb=pbeg(myid)
      pe=pend(myid)
      lb=lbeg(myid)
      le=lend(myid)
      mmp = pe-pb+1
      mml = le-lb+1
      
      
      if (myid.eq.0) then
!  save in plcalc(i) the processor "j" that is
!  taking care of the plane "i".
         j=0
         do i=1,nplanes
            if (i.lt.pend(j)+1) then
                plcalc(i) = j
            else
                j=j+1
                plcalc(i) = j
            endif
         enddo
      endif
      
      call MPI_BCAST(filout,100,MPI_CHARACTER,0,MPI_COMM_WORLD,ierr)
      call MPI_BCAST(plcalc,nplanes,MPI_INTEGER,0,MPI_COMM_WORLD,ierr)
      
      !if (myid.gt.numerop) return
          
c    ------------  initializes fast fourier transforms and CFDiff ----
      call cfti(mgalz) !complex Fourier Transform init
c     ! call initfft()
      call rfti(mgalx) !real Fourier Transform init

      write (*,*) 'precalculo matrices ...',myid
      
      allocate(d11(my,7),d12(my,7),d21(my,5),d22(my,5))
      
      call derivadas(d11,d12,d21,d22)      
            
      deallocate(d11,d12,d21,d22)
      
      write (*,*) 'FIN precalculo matrices ...',myid
      
!    --------------  coefficients for trapz averaging ------

      do j=2,my-1
         trp(j)= 0.25d0*(y(j+1)-y(j-1))
         hy(j) = (y(j+1)-y(j-1))/2d0
      enddo
      trp(1) = 0.25d0*(y(2) -y(1))
      trp(my)= 0.25d0*(y(my)-y(my-1))
      hy(1)  = (y(2)-y(1))/2d0
      hy(my) = (y(my)-y(my-1))/2d0

c ---------preparing jsptot for spectra comput....
      do j=1,nspec
         jsptot(j)           =  jspecy(j)
         !jsptot(2*nspec+2-j) = my-jspecy(j)+1
      enddo
       jsptot(nspec+1) = (my+1)/2

c ------------------ Re/dt --------------------------------
      dtr = Re/Delt

c ------------------ MPI Datatypes ------------------------

      blocks = le-lb+1
      elem   = 2*(pe-pb+1)
      stride = mx
      do iproc=0,numerop-1

         if (iproc.ne.myid) then

             call MPI_TYPE_VECTOR(blocks,elem,
     .                            stride,MPI_REAL,myslice(iproc),
     .                            ierr)

             call MPI_TYPE_COMMIT(myslice(iproc),ierr)

         endif
      enddo
      
c ---------------------

      blocks = (pe-pb+1)
      elem   = 2*(le-lb+1)
      stride = 2*my*mgalz

      do iproc=0,numerop-1

         if (iproc.ne.myid) then
             elem = 2* (lend(iproc)-lbeg(iproc)+1)
             call MPI_TYPE_VECTOR(blocks,elem,
     .                            stride,MPI_REAL,myplane(iproc),
     .                            ierr)

             call MPI_TYPE_COMMIT(myplane(iproc),ierr)

         endif
      enddo

c ----------------------

c ------ slide plane by plane.

      blocks = (le-lb+1)
      elem   = 2
      stride = mx

      do iproc=0,numerop-1

         if (iproc.ne.myid) then
             call MPI_TYPE_VECTOR(blocks,elem,
     .                            stride,MPI_REAL,plbypl(iproc),
     .                            ierr)

             call MPI_TYPE_COMMIT(plbypl(iproc),ierr)

         endif
      enddo


c ------------------- Computes wavenumbers ---------------


      do k=0,nz1
         xbet(k) = cmplx(zero,bet*k)
         !rbet(K) = bet*k
         icx(k) = k
      enddo

      do k=nz1+1,mz1
         xbet(k) = cmplx(zero ,-bet*(mz1+1-k))
         !rbet(k) = -bet*(mz1+1-k)
      enddo

      do k=1,nz1
         icx(mz-k) = k
      enddo

      do i=0,mx1
         iax(2*i+1) = i
         iax(2*i+2) = i
      enddo

      do i=0,mx1
         xalp(i) = cmplx(zero ,alp*i)
         !ralp(i) = alp*i
      enddo

      do i=0,mx1
         alp2(i) = -xalp(i)**2
      enddo

      do j=0,mz1
         bet2(j) = -xbet(j)**2
      enddo        

c --------------  write header for output -------------
      call MPI_BARRIER(MPI_COMM_WORLD,ierr)     



      if(myid.eq.0) then
         write(*,'(a7,f8.2,a8,f6.3,a8,f6.3)')
     .                    '  Re =',Re,'channel'
         write(*,'(a7,f8.3,a8,f6.3,a8,f6.3)')
     .                    'alp =',alp,'  bet =',bet
         write(*,*)

         write(*,'(a8,i5,a8,i5,a8,i5)')
     .                    'mgalx =',mgalx,'mgalz =',mgalz,'my =',my
         write(*,'(a8,i5,a8,i5,a8,i5)')
     .                    'mx =',mx,'mz =',mz
         write(*,*)

         write(*,'(a10,i6,a9,i6,a9,i5)')
     .     'nstep =',nstep,'nimag =',nimag,'nhist =',nhist
         write(*,'(a10,e12.4,a8,f5.2)')
     .     'Delt =',Deltat,'  CFL =',CFL
         write(*,*)
         write(*,'(a,a)')
     .     'reading from:  ',filinp
         write(*,*)
         write(*,'(a,a)')
     .     '  write in :  ',filout
      endif

      end
       
!***********************************************************************!
!
!
 
!***********************************************************************!
!                   get data field from file                            !
!                                             jjs  27/1/01              !
!                                             shc  05/1/05              !
!***********************************************************************!
      subroutine getfil(vor,phi,psi,scal,u00,v00,w00,wk1,myid)
      use tem
      use point
      use ficheros
      use fis
      use MPI_GROUPS
   

      implicit none

      include "mpif.h"
      include "ctes3D"

!   -------------------- variables -------------------------------------
     
      integer myid,master,istat(MPI_STATUS_SIZE),ierr       
      real(4) ::vor(2*my,mz,*),phi(2*my,mz,*),wk1(*),
     .          psi(2*my,mz,*),scal(2*my,mz,*)
      real(8):: u00(*),v00(*),w00(*)
      
      real(8) :: fmape(my) 
      real(4) ::  Ree,alpe,bete,a0e

      integer i,j,mxe,mye,mze,ntotr,iproc,mym,mmy2
      

!   --------------------- Program -------------------------------------

      master = 0

!      ---------------  read from file and distribute

      if (myid.eq.master) then     

         open(iinp,file=filinp,status='unknown',form='unformatted')
         
         read(iinp) time,Ree,alpe,bete,a0e,mxe,mye,mze,
     .               (y(j),fmape(j),j=1,my),(wk1(j),j=1,3*my)

         write(*,*) 
         write(*,*) 'reading input file ...' 
         write(*,*) 'time=',time,'Ree=',Ree,'alpe=',alpe,
     .   'bete=',bete,'mxe=',mxe,'mye=',mye,'mze =', mze
         write(*,*)

         write(*,*) 'valores para vhange',my*mgalz*mmp


         !ntotr=4*mye*mze
         ntotr=8*mye*mze !vor phi psi scal x2
!     ------------- 00 modes ------------------

         mym = min(my,mye)
         do j=1,mym
            u00(j) = wk1(3*j-2)
            v00(j) = wk1(3*j-1)
            w00(j) = wk1(3*j)
         enddo
         

!     ------------ 00 modes only for master 

         do iproc=1,numerop-1
            call MPI_SEND(mxe,1,MPI_INTEGER,iproc,
     &                iproc,MPI_COMM_WORLD,ierr)
            call MPI_SEND(mye,1,MPI_INTEGER,iproc,
     &                iproc,MPI_COMM_WORLD,ierr)
            call MPI_SEND(mze,1,MPI_INTEGER,iproc,
     &                iproc,MPI_COMM_WORLD,ierr)
         enddo

c         ------------  other modes,  master node -----
         
         write(*,*) 'master reads its data',ntotr
              

         do i=1,(pe-pb+1)
            read(iinp) (wk1(j),j=1,ntotr)
            call assign(wk1,vor(1,1,i),phi(1,1,i),psi(1,1,i),
     .                  scal(1,1,i),my,mz,mye,mze,myid,i)
         enddo


!         ------------  other modes,  distribute to slaves --
 
         do iproc=1,numerop-1
           mmy2 = min(pend(iproc),mxe/2)-pbeg(iproc)+1
           write (*,*) mmy2,pend(iproc),mxe/2
           if (mmy2.gt.0) then
              do i=1,mmy2
                 read(iinp) (wk1(j),j=1,ntotr)
                  call MPI_SEND(wk1,ntotr,MPI_REAL,
     &                          iproc,iproc,MPI_COMM_WORLD,ierr)
              enddo
           write(*,*) 'master reads proc no',iproc,' data and send them'
           endif
         enddo

         close(iinp)

      else          ! -------- this is done by all slaves

         call MPI_RECV(mxe,1,MPI_INTEGER,master,
     &                MPI_ANY_TAG,MPI_COMM_WORLD,istat,ierr)
         call MPI_RECV(mye,1,MPI_INTEGER,master,
     &                MPI_ANY_TAG,MPI_COMM_WORLD,istat,ierr)
         call MPI_RECV(mze,1,MPI_INTEGER,master,
     &                MPI_ANY_TAG,MPI_COMM_WORLD,istat,ierr)

          ntotr=8*mye*mze
c         ------------  receive other modes ----------
       
         mmy2 = min(pe,mxe/2)-pb+1
         if (mmy2.gt.0) then
            do i=1,mmy2
               call MPI_RECV(wk1,ntotr,MPI_REAL,master,
     &                       MPI_ANY_TAG,MPI_COMM_WORLD,istat,ierr)
               call assign(wk1,vor(1,1,i),phi(1,1,i),psi(1,1,i),
     .                      scal(1,1,i),my,mz,mye,mze,myid,i)
            enddo
            write(*,*) 'proc no.',myid,'receives data from master'
         endif
      endif
      
      

      end



!***********************************************************************!
!
!     Routine assign.
!     Distribute data from (mye,mze)-mesh to (my,mz)-mesh 
!
!          single    jjs 4/01/01, 
!          rewritten jjs 28/01/01
!          adapted   shc 5/09/04
!***********************************************************************!
      subroutine assign(work,vor,phi,psi,scal,my,mz,mye,mze,myid,planex)

      implicit none

      integer   mym,mzm,klen,kini1,kini2,j,k,k1,k2,my,mz,mye,mze
      real(4)    vor(2*my,mz),phi(2*my,mz)
      real(4)    psi(2*my,mz),scal(2*my,mz)
      real(4)    work(4,2*mye,mze)
      real(4)    zero
      integer planex
      integer   myid
      integer flag
      
      zero = 0.0
      flag = 0
      
      mym = min(my,mye)
      mzm = min(mz,mze)

      klen = (mzm+1)/2
      kini1=mze - klen + 1
      kini2=mz - klen + 1
      
      do k=1,klen
         do j=1,2*my
            vor(j,k)=work(1,j,k)
            phi(j,k)=work(2,j,k)
            psi(j,k)=work(3,j,k)
            scal(j,k)=work(4,j,k)
         enddo
      enddo

      do k=1,klen-1
         k1 = k + kini1
         k2 = k + kini2
         do j=1,2*my
            vor (j,k2) = work(1,j,k1)
            phi (j,k2) = work(2,j,k1)
            psi (j,k2) = work(3,j,k1)
            scal(j,k2) = work(4,j,k1)
         enddo
      enddo

!      !SET IMAGINARY PART ON MODES (0,kz) TO ZERO
!      if (myid.eq.0) then
!         if (planex.eq.1) then
!            write(*,*) "Setting imaginary parts of modes (0 , kz)
!     .                   to zero."
!            do k=1,mz
!               do j=2,2*my,2 !Imaginary parts are even
!                       vor(j,k)  = 0.0
!                       phi(j,k)  = 0.0
!                       psi(j,k)  = 0.0
!                       scal(j,k) = 0.0
!               enddo
!            enddo
!         endif
!      endif



      end


