def create_filenames(varname,nsteps,rksteps=3):
	""" filenames  = create_filenames(varname,nsteps,*rksteps) 
	    list       = create_filenames(str, int)
	    returns a list of filenames live varname.+001001,001002,...,nsteps/003
	Ex:
	print create_filenames("v00.", 2,0)
        >>> ['v00.001','v00.002']	
	"""
	filenames=[]
	for istep in range(nsteps):
		if rksteps != 0:
    			for rkstep in range(rksteps):
        			filename=  varname +'%03d' % (istep+1) + '%03d' % (rkstep+1)
				filenames.append(filename)
		else:
        		filename=  varname +'%03d' % (istep+1)
			filenames.append(filename)
	return filenames

#-----------------------------------------------------------------------------------------------------#
def readASCII(filename):
	""" open a text file with "ncolumns"
	 and reads data, returns a list of lists
	 Important: data must be numbers only and same columns for all lines! 
	[list] = readASCII([str])
	"""
	import numpy as np
	f1 = open(filename,'r')
	file = f1.readlines()
	f1.close()
	#Take one line for info
	ncolumns= len(file[0].split()) 
	nlines = len(file)
	print "Reading file of %s lines and %s columns" %(nlines,ncolumns)
	x = [[] for i in range(ncolumns)]	
	for line in file:
		row = line.split()
		for col in range(len(row)):
			x[col].append(float(row[col].replace('D','E')))
	#return x
	return np.array(x)
			
			
def makeplot(x,col1=0,col2=1):
	import pylab as pl
	fig = pl.figure()
	pl.plot(x[col1,:],x[col2,:],'go')
	#fig.show()
	pl.show()
	print 'Continue computation'

def readfield(filename,my=513):
	""" This function reads the typical unformatted output generated by LOMA
	This case works for SCALAR
	(y,field) = readfield(filename,my)
	(array,array[nxplanes,mz,my,2] = readfield (str,int)
	"""
	import scipy as sc
	import numpy as np
	import pylab
	f = open(filename,'rb')
	#Create dtypes for proper reading from Fortran unformatted
	# binary file
	#Declaring types
	yfmap = np.dtype([('y','float64'),('fmap','float64')])
	uw00 = np.dtype([('u00','float32'),('w00','float32')])
	rec1 = np.dtype([('dummy1','uint32'), \
                ('time','float32'),('Re','float32'), \
		('alp','float32'),('bet','float32'), \
		('a0','float32'),\
		('mx','uint32'),('my','uint32'),('mz','uint32'),\
		('yfmap',yfmap,my), \
		('uw00',uw00,my),
		('dummy2','uint32')])
	#Read first record
	RECORD1=np.fromfile(f,rec1,1)

	#Check if first record is ok...
	if RECORD1['dummy1'] != RECORD1['dummy2']:
		print "File read not good...!"
	else:
    		print "Fiel read correctly :)"

	mx=RECORD1['mx']
	my=RECORD1['my']
	mz=RECORD1['mz']
	ntotr=2*my*mz
	#Create type "recplane"
	recplane = np.dtype([('dummy1','uint32'), \
                 ('data','float32',ntotr), \
                 ('dummy2','uint32')])

	#Read all planes info
	nplanes=mx//2
	FIELD=np.ndarray(shape=(nplanes,mz,my,2),\
		 dtype=float, order='F')
	FIELD.shape
	for i in range(nplanes):
    		readrec = np.fromfile(f,recplane,1)
    		planedata = readrec['data']
    		planedata.shape=(mz,my,2)
    		FIELD[i,:,:]=planedata

	f.close()
	#Return y, FIELD
	return RECORD1['yfmap']['y'][0,:],FIELD

def read2field(filename,my=513):
	""" This function reads the typical unformatted output generated by LOMA
	This case works for output files (classic vor/phi)
	(y,vor,phi) = read2field(filename,my)
	(array,array[nxplanes,mz,my,2],array[nxplanes,mz,my,2] = read2field (str,int)
	"""
	import scipy as sc
	import numpy as np
	import pylab
	f = open(filename,'rb')
	#Create dtypes for proper reading from Fortran unformatted
	# binary file
	#Declaring types
	yfmap = np.dtype([('y','float64'),('fmap','float64')])
	uw00 = np.dtype([('u00','float32'),('w00','float32')])
	rec1 = np.dtype([('dummy1','uint32'), \
                ('time','float32'),('Re','float32'), \
		('alp','float32'),('bet','float32'), \
		('a0','float32'),\
		('mx','uint32'),('my','uint32'),('mz','uint32'),\
		('yfmap',yfmap,my), \
		('uw00',uw00,my),
		('dummy2','uint32')])
	#Read first record
	RECORD1=np.fromfile(f,rec1,1)

	#Check if first record is ok...
	if RECORD1['dummy1'] != RECORD1['dummy2']:
		print "File read not good...!"
	else:
    		print "Fiel read correctly :)"

	mx=RECORD1['mx']
	my=RECORD1['my']
	mz=RECORD1['mz']
	ntotr=4*my*mz
	#Create type "recplane"
	recplane = np.dtype([('dummy1','uint32'), \
                 ('data','float32',ntotr), \
                 ('dummy2','uint32')])

	#Read all planes info
	nplanes=mx//2
	FIELD1=np.ndarray(shape=(nplanes,mz,my,2),\
		 dtype=float, order='F')
	FIELD2=np.ndarray(shape=(nplanes,mz,my,2),\
		 dtype=float, order='F')
	for i in range(nplanes):
    		readrec = np.fromfile(f,recplane,1)
    		planedata = readrec['data']
    		planedata.shape=(mz,my,4)
		vor = planedata[:,:,0:2]
		vor.shape=(mz,my,2)
		phi = planedata[:,:,2:4]
		phi.shape=(mz,my,2)
    		FIELD1[i,:]=vor
    		FIELD2[i,:]=phi

	f.close()
	#Return y, FIELD
	return RECORD1['yfmap']['y'][0,:],FIELD1,FIELD2




#x = readASCII('v00.002001')
#makeplot(x)
#print "I am here..."

